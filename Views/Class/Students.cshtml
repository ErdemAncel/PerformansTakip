@model List<PerformansTakip.Models.Student>

@{
    ViewData["Title"] = ViewBag.ClassName + " - Öğrenci Listesi";
    var trackingType = ViewBag.TrackingType;
    var classId = ViewContext.RouteData.Values["id"];
}

<style>
    /* Modern Progress Bar Bildirimleri */
    .progress-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        width: 320px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        opacity: 0;
        visibility: hidden;
        transform: translateX(100%);
        transition: all 0.3s ease;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .progress-container.visible {
        opacity: 1;
        visibility: visible;
        transform: translateX(0);
    }
    
    .progress-header {
        padding: 14px 16px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .progress-header strong {
        font-weight: 600;
        font-size: 14px;
        color: #333;
    }
    
    .progress-body {
        padding: 16px;
    }
    
    .progress {
        height: 3px;
        margin: 0;
        border-radius: 1.5px;
        background-color: rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }
    
    .progress-bar {
        height: 100%;
        background-color: #3b82f6;
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
        transition: width 0.3s ease;
    }
    
    .progress-success .progress-bar {
        background-color: #10b981;
        box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
    }
    
    .progress-error .progress-bar {
        background-color: #ef4444;
        box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
    }
    
    .progress-info .progress-bar {
        background-color: #3b82f6;
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
    }
    
    .progress-warning .progress-bar {
        background-color: #f59e0b;
        box-shadow: 0 0 10px rgba(245, 158, 11, 0.5);
    }
    
    .progress-close {
        cursor: pointer;
        background: none;
        border: none;
        font-size: 18px;
        color: #999;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
    }
    
    .progress-close:hover {
        background-color: rgba(0, 0, 0, 0.05);
        color: #333;
    }
    
    #progressMessage {
        font-size: 13px;
        color: #666;
        margin-bottom: 12px;
    }
    
    /* Animasyonlar */
    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @@keyframes fadeOut {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }
    
    .progress-container.show {
        animation: slideIn 0.3s ease-out forwards;
    }
    
    .progress-container.hide {
        animation: fadeOut 0.3s ease-out forwards;
    }

    /* Genel Tasarım İyileştirmeleri */
    .container {
        max-width: 1200px;
    }
    .table {
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    .table th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
    }
    .btn {
        border-radius: 0.25rem;
        padding: 0.375rem 0.75rem;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
    }
    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    .btn-primary:hover {
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }
    .btn-success {
        background-color: #198754;
        border-color: #198754;
    }
    .btn-success:hover {
        background-color: #157347;
        border-color: #146c43;
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-danger:hover {
        background-color: #bb2d3b;
        border-color: #b02a37;
    }
    .form-control {
        border-radius: 0.25rem;
        border: 1px solid #ced4da;
        padding: 0.375rem 0.75rem;
    }
    .form-control:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    .modal-content {
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        border-radius: 0.5rem 0.5rem 0 0;
    }
    .alert {
        border-radius: 0.5rem;
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
</style>

<div class="progress-container" id="progressContainer">
    <div class="progress-header">
        <strong id="progressTitle">İşlem Devam Ediyor</strong>
        <button type="button" class="progress-close" id="progressClose">&times;</button>
    </div>
    <div class="progress-body">
        <div id="progressMessage">İşlem başlatılıyor...</div>
        <div class="progress">
            <div class="progress-bar" id="progressBar" role="progressbar" style="width: 0%"></div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">@ViewBag.ClassName - Öğrenci Listesi</h2>
        <div>
            <button type="button" class="btn btn-danger me-2" onclick="deleteAllStudents()">
                <i class="fas fa-trash"></i> Tüm Öğrencileri Sil
            </button>
            <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addStudentModal">
                <i class="fas fa-plus"></i> Yeni Öğrenci Ekle
            </button>
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#bulkAddModal">
                <i class="fas fa-users"></i> Toplu Öğrenci Ekle
            </button>
        </div>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i> Bu sınıfta henüz öğrenci bulunmamaktadır.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Öğrenci No</th>
                        <th>Ad Soyad</th>
                        @if (trackingType == "uniform")
                        {
                            <th>Kıyafet Durumu</th>
                        }
                        else if (trackingType == "homework")
                        {
                            <th>Ödev Durumu</th>
                        }
                        else if (trackingType == "performance")
                        {
                            <th>Performans Puanı</th>
                        }
                        <th>Son Güncelleme</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in Model)
                    {
                        <tr>
                            <td>@student.Id</td>
                            <td>@student.FirstName @student.LastName</td>
                            @if (trackingType == "uniform")
                            {
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input uniform-status" type="checkbox" 
                                               data-student-id="@student.Id"
                                               @(student.UniformStatus ? "checked" : "")>
                                        <label class="form-check-label">
                                            @(student.UniformStatus ? "Uygun" : "Uygun Değil")
                                        </label>
                                    </div>
                                </td>
                            }
                            else if (trackingType == "homework")
                            {
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input homework-status" type="checkbox" 
                                               data-student-id="@student.Id"
                                               @(student.HomeworkStatus ? "checked" : "")>
                                        <label class="form-check-label">
                                            @(student.HomeworkStatus ? "Tamamlandı" : "Tamamlanmadı")
                                        </label>
                                    </div>
                                </td>
                            }
                            else if (trackingType == "performance")
                            {
                                <td>
                                    <div class="input-group">
                                        <input type="number" 
                                               class="form-control performance-score" 
                                               data-student-id="@student.Id"
                                               value="@student.PerformanceScore" 
                                               min="0" 
                                               max="100"
                                               style="font-size: 1.25rem; text-align: center;"
                                               onfocus="this.select()">
                                        <button class="btn btn-outline-primary score-save-btn" 
                                                data-student-id="@student.Id"
                                                style="display: none;">
                                            <i class="fas fa-save"></i>
                                        </button>
                                    </div>
                                    <small class="text-muted mobile-warning" style="display: none;">
                                        <i class="fas fa-exclamation-triangle"></i> Lütfen puan girişini bilgisayardan yapın
                                    </small>
                                </td>
                            }
                            <td>@student.LastUpdated.ToString("dd.MM.yyyy HH:mm")</td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteStudent(@student.Id)">
                                    <i class="fas fa-trash"></i> Sil
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modals -->
<div class="modal fade" id="addStudentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Yeni Öğrenci Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addStudentForm">
                    <input type="hidden" id="classId" value="@ViewBag.ClassId" />
                    <div class="mb-3">
                        <label class="form-label">Ad</label>
                        <input type="text" class="form-control" id="firstName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Soyad</label>
                        <input type="text" class="form-control" id="lastName" required>
                    </div>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                        <button type="submit" class="btn btn-primary">Kaydet</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="bulkAddModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Toplu Öğrenci Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> Her satıra bir öğrenci bilgisi girin. Format: Ad Soyad
                </div>
                <div class="mb-3">
                    <textarea class="form-control" id="bulkStudentNames" rows="10" placeholder="Örnek:
Ahmet Yılmaz
Ayşe Demir
Mehmet Kaya"></textarea>
                </div>
                <div class="text-end">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" onclick="addBulkStudents()">Kaydet</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Öğrenci ekleme formu
            $('#addStudentForm').on('submit', function(e) {
                e.preventDefault();
                
                var student = {
                    ClassId: parseInt($('#classId').val()),
                    FirstName: $('#firstName').val(),
                    LastName: $('#lastName').val()
                };
                
                const progressInterval = showProgress('Öğrenci ekleniyor...', 'info');
                
                $.ajax({
                    url: '/Class/AddStudent',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(student),
                    success: function(response) {
                        clearInterval(progressInterval);
                        if (response.success) {
                            $('#addStudentModal').modal('hide');
                            completeProgress(true, 'Öğrenci başarıyla eklendi!');
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            completeProgress(false, 'Hata: ' + response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        clearInterval(progressInterval);
                        console.error('Error:', error);
                        completeProgress(false, 'Bir hata oluştu! Lütfen tekrar deneyin.');
                    }
                });
            });

            // Kıyafet durumu güncelleme
            $('.uniform-status').change(function() {
                var studentId = $(this).data('student-id');
                var status = $(this).prop('checked');
                updateUniformStatus(studentId, status);
            });

            // Ödev durumu güncelleme
            $('.homework-status').change(function() {
                var studentId = $(this).data('student-id');
                var status = $(this).prop('checked');
                updateHomeworkStatus(studentId, status);
            });

            // Mobil cihaz kontrolü
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            
            if (isMobile) {
                // Mobil cihazlarda input alanlarını devre dışı bırak ve uyarı göster
                $('.performance-score').prop('readonly', true);
                $('.mobile-warning').show();
                
                // Input alanına tıklandığında uyarı göster
                $('.performance-score').on('focus', function() {
                    showToast('Lütfen puan girişini bilgisayardan yapın', 'warning');
                });
            }

            // Performans puanı girişi için event listener'lar
            $('.performance-score').on('input', function() {
                if (!isMobile) {
                    const saveBtn = $(this).siblings('.score-save-btn');
                    saveBtn.show();
                }
            });

            $('.score-save-btn').on('click', function() {
                if (!isMobile) {
                    const studentId = $(this).data('student-id');
                    const score = $(this).siblings('.performance-score').val();
                    updatePerformanceScore(studentId, score);
                    $(this).hide();
                }
            });

            // Enter tuşu ile kaydetme
            $('.performance-score').on('keypress', function(e) {
                if (!isMobile && e.which === 13) {
                    const studentId = $(this).data('student-id');
                    const score = $(this).val();
                    updatePerformanceScore(studentId, score);
                    $(this).siblings('.score-save-btn').hide();
                    e.preventDefault();
                }
            });

            // Input alanından çıkıldığında kaydetme
            $('.performance-score').on('blur', function() {
                if (!isMobile) {
                    const studentId = $(this).data('student-id');
                    const score = $(this).val();
                    if (score !== '') {
                        updatePerformanceScore(studentId, score);
                        $(this).siblings('.score-save-btn').hide();
                    }
                }
            });

            // Progress bar kapatma butonu
            $('#progressClose').click(function() {
                $('#progressContainer').removeClass('visible');
            });
        });

        // Progress bar fonksiyonları
        function showProgress(message, type = 'info') {
            $('#progressTitle').text('İşlem Devam Ediyor');
            $('#progressMessage').text(message);
            $('#progressContainer').removeClass('progress-success progress-error progress-info progress-warning')
                .addClass('progress-' + type + ' visible');
            $('#progressBar').css('width', '0%');
            
            // Progress bar'ı yavaşça ilerlet
            let progress = 0;
            const interval = setInterval(function() {
                progress += 1;
                if (progress <= 100) {
                    $('#progressBar').css('width', progress + '%');
                } else {
                    clearInterval(interval);
                }
            }, 30);
            
            return interval;
        }
        
        function completeProgress(success = true, message = '') {
            const type = success ? 'success' : 'error';
            const title = success ? 'İşlem Tamamlandı' : 'Hata Oluştu';
            
            $('#progressTitle').text(title);
            if (message) {
                $('#progressMessage').text(message);
            }
            $('#progressContainer').removeClass('progress-success progress-error progress-info progress-warning')
                .addClass('progress-' + type);
            $('#progressBar').css('width', '100%');
            
            // 2 saniye sonra progress bar'ı gizle
            setTimeout(function() {
                $('#progressContainer').removeClass('visible');
            }, 2000);
        }

        function addBulkStudents() {
            const classId = @ViewBag.ClassId;
            const studentNamesText = $('#bulkStudentNames').val().trim();
            
            if (!studentNamesText) {
                alert('Lütfen en az bir öğrenci bilgisi girin.');
                return;
            }

            const studentNames = studentNamesText.split('\n')
                .map(name => name.trim())
                .filter(name => name.length > 0);

            if (studentNames.length === 0) {
                alert('Lütfen geçerli öğrenci bilgileri girin.');
                return;
            }

            const invalidNames = studentNames.filter(name => {
                const parts = name.split('');
                return parts.length < 2 || parts.some(part => part.length < 2);
            });

            if (invalidNames.length > 0) {
                alert(`Geçersiz öğrenci formatı: ${invalidNames.join(', ')}. Her öğrenci için ad ve soyad giriniz.`);
                return;
            }

            const progressInterval = showProgress('Öğrenciler ekleniyor...', 'info');

            $.ajax({
                url: '/Class/AddMultipleStudents',
                type: 'POST',
                data: JSON.stringify({
                    classId: classId,
                    studentNames: studentNames
                }),
                contentType: 'application/json',
                success: function(response) {
                    clearInterval(progressInterval);
                    if (response.success) {
                        $('#bulkAddModal').modal('hide');
                        completeProgress(true, 'Öğrenciler başarıyla eklendi!');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        completeProgress(false, 'Hata: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    clearInterval(progressInterval);
                    console.error('Error:', error);
                    completeProgress(false, 'Bir hata oluştu! Lütfen tekrar deneyin.');
                }
            });
        }

        function updateUniformStatus(studentId, status) {
            const progressInterval = showProgress('Kıyafet durumu güncelleniyor...', 'info');

            $.post('/Class/UpdateUniform', { studentId: studentId, status: status })
                .done(function(response) {
                    clearInterval(progressInterval);
                    if (response.success) {
                        completeProgress(true, 'Kıyafet durumu başarıyla güncellendi');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        completeProgress(false, 'Güncelleme başarısız: ' + response.message);
                    }
                })
                .fail(function() {
                    clearInterval(progressInterval);
                    completeProgress(false, 'Bir hata oluştu');
                });
        }

        function updateHomeworkStatus(studentId, status) {
            const progressInterval = showProgress('Ödev durumu güncelleniyor...', 'info');

            $.post('/Class/UpdateHomework', { studentId: studentId, status: status })
                .done(function(response) {
                    clearInterval(progressInterval);
                    if (response.success) {
                        completeProgress(true, 'Ödev durumu başarıyla güncellendi');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        completeProgress(false, 'Güncelleme başarısız: ' + response.message);
                    }
                })
                .fail(function() {
                    clearInterval(progressInterval);
                    completeProgress(false, 'Bir hata oluştu');
                });
        }

        function updatePerformanceScore(studentId, score) {
            if (score === '') return;
            
            const numericScore = parseInt(score);
            if (isNaN(numericScore) || numericScore < 0 || numericScore > 100) {
                alert('Lütfen 0-100 arası geçerli bir puan girin');
                return;
            }

            const progressInterval = showProgress('Puan güncelleniyor...', 'info');

            $.post('/Class/UpdatePerformance', { studentId: studentId, score: numericScore })
                .done(function(response) {
                    clearInterval(progressInterval);
                    if (response.success) {
                        completeProgress(true, 'Puan başarıyla güncellendi');
                    } else {
                        completeProgress(false, 'Güncelleme başarısız: ' + response.message);
                    }
                })
                .fail(function() {
                    clearInterval(progressInterval);
                    completeProgress(false, 'Bir hata oluştu');
                });
        }

        function deleteStudent(studentId) {
            if (!confirm('Bu öğrenciyi silmek istediğinizden emin misiniz?')) {
                return;
            }

            const progressInterval = showProgress('Öğrenci siliniyor...', 'info');

            $.post('/Class/DeleteStudent', { studentId: studentId })
                .done(function(response) {
                    clearInterval(progressInterval);
                    if (response.success) {
                        completeProgress(true, 'Öğrenci başarıyla silindi!');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        completeProgress(false, 'Silme işlemi başarısız: ' + response.message);
                    }
                })
                .fail(function() {
                    clearInterval(progressInterval);
                    completeProgress(false, 'Bir hata oluştu! Lütfen tekrar deneyin.');
                });
        }

        function deleteAllStudents() {
            if (!confirm('Tüm öğrencileri silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!')) {
                return;
            }

            const classId = @ViewBag.ClassId;
            const progressInterval = showProgress('Tüm öğrenciler siliniyor...', 'info');

            $.ajax({
                url: '/Class/DeleteAllStudents',
                type: 'POST',
                data: { classId: classId },
                success: function(response) {
                    clearInterval(progressInterval);
                    if (response.success) {
                        completeProgress(true, 'Tüm öğrenciler başarıyla silindi!');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        completeProgress(false, 'Hata: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    clearInterval(progressInterval);
                    console.error('Error:', error);
                    completeProgress(false, 'Bir hata oluştu! Lütfen tekrar deneyin.');
                }
            });
        }
    </script>
} 